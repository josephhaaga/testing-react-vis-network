{"version":3,"sources":["Graph.js","App.js","serviceWorker.js","index.js"],"names":["Graph","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addNode","bind","assertThisInitialized","addEdge","genScal","state","nodes","id","type","edges","from","to","nodeTypes","edgeTypes","n","newId","Math","max","apply","toConsumableArray","map","x","parseInt","slice","push","setState","e","f","t","idToDel","filter","console","log","newType","p","assign","target","value","generateScala","_this2","react_default","a","createElement","lib","key","label","avail","listOfNodes","idx","style","color","disabled","onChange","changeType","y","onClick","deleteNode","listOfEdges","deleteEdge","srcs","dsts","allNodes","usedNodes","Set","concat","difference","has","theQuery","react_prism_lib","className","join","background","options","height","Component","App","Graph_Graph","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dbf1d6e3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Network, Node, Edge } from '@lifeomic/react-vis-network';\nimport {PrismCode} from \"react-prism\";\n// require('prismjs/themes/prism.css');\n\nclass Graph extends Component {\n  constructor(props){\n    super(props)\n    this.addNode = this.addNode.bind(this)\n    this.addEdge = this.addEdge.bind(this)\n    this.genScal = this.genScal.bind(this)\n    // this.deleteNode = this.deleteNode.bind(this)\n    // this.deleteEdge = this.deleteEdge.bind(this)\n    // this.changeType = this.changeType.bind(this)\n    this.state = {\n      nodes: [\n        {id: 'v1', type: 'Person'},\n        {id: 'v2', type: 'Vertex'},\n        {id: 'v3', type: 'Person'},\n        {id: 'v4', type: 'Vertex'},\n      ],\n      edges: [\n        {id: 'e1', from: 'v1', to: 'v2', type: 'employed_by'},\n        {id: 'e2', from: 'v3', to: 'v2', type: 'Edge'},\n      ],\n      nodeTypes: [\"Vertex\", \"Person\", \"Company\"],\n      edgeTypes: [\"Edge\", \"employed_by\", \"claims_dependent\"]\n    }\n  }\n\n  addNode(){\n    let n = this.state.nodes\n    const newId = \"v\" + (Math.max(...n.map(x => parseInt(x.id.slice(1)))) + 1)\n    n.push({id: newId, type: 'Vertex'})\n    this.setState({nodes: n})\n  }\n\n  addEdge(){\n    let e = this.state.edges\n    const newId = \"e\" + (Math.max(...e.map(x => parseInt(x.id.slice(1)))) + 1)\n    const f = this.state.nodes[0].id\n    const t = this.state.nodes[0].id\n    e.push({id: newId, type: \"Edge\", from: f, to: t})\n    this.setState({edges: e})\n  }\n\n  deleteNode(idToDel){\n    const n = this.state.nodes.filter(x => x.id !== idToDel)\n    const e = this.state.edges.filter(x => x.from !== idToDel && x.to !== idToDel)\n    this.setState({nodes: n, edges: e})\n  }\n\n  deleteEdge(idToDel){\n    console.log(\"running deleteEdge on \"+idToDel);\n    const e = this.state.edges.filter(x => x.id !== idToDel)\n    this.setState({edges: e})\n  }\n\n  changeType(id, newType){\n    if(id[0] === 'e'){\n      const z = this.state.edges\n      let p = z.map(x => {\n        if(x.id === id){\n          x = Object.assign(x, newType)\n        }\n        return x\n      })\n      this.setState({edges: p})\n    }else{\n      const z = this.state.nodes\n      let p = z.map(x => {\n        if(x.id === id){\n          x['type'] = newType.target.value\n        }\n        return x\n      })\n      this.setState({nodes: p})\n    }\n  }\n\n  genScal(){\n    this.setState({generateScala: true})\n  }\n\n  render(){\n    const nodes = this.state.nodes.map(x =>\n      <Node key={\"n\"+x.id} id={x.id} label={x.id+\": \"+x.type} type={x.type} />\n    )\n    const edges = this.state.edges.map(x =>\n      <Edge key={\"e\"+x.id} id={x.id} from={x.from} to={x.to} label={x.type} type={x.type}/>\n    )\n    const avail = ((this.state.generateScala) ? `disabled` : null);\n    const listOfNodes = this.state.nodes.map((x, idx) =>\n      <tr key={idx}>\n        <td>{x.id}</td>\n        <td style={{color: 'red'}}>isa</td>\n        <td>\n          <select\n            value={x.type}\n            disabled={avail}\n            onChange={(e)=>this.changeType(x.id, e)}>\n            {this.state.nodeTypes.map((y, idx) =>\n              <option key={idx} value={y}>{y}</option>\n            )}\n          </select>\n        </td>\n        <td><button onClick={(e) => this.deleteNode(x.id)}>X</button></td>\n      </tr>\n    )\n    const listOfEdges = this.state.edges.map(x =>\n      <tr key={x.id}>\n        <td>\n          <select\n            disabled={avail}\n            onChange={e => this.changeType(x.id, {\"from\": e.target.value})}\n            value={x.from}>\n            {this.state.nodes.map((a, idx) =>\n              <option key={idx} value={a.id}>{a.id}</option>\n            )}\n          </select>\n        </td>\n        <td>\n          <select\n            disabled={avail}\n            onChange={e => this.changeType(x.id, {\"type\": e.target.value})}\n            value={x.type}>\n            {this.state.edgeTypes.map((a, idx) =>\n              <option key={idx} value={a}>{a}</option>\n            )}\n          </select>\n        </td>\n        <td>\n          <select\n            disabled={avail}\n            onChange={e => this.changeType(x.id, {\"to\": e.target.value})}\n            value={x.to}>\n            {this.state.nodes.map((a, idx) =>\n              <option key={idx} value={a.id}>{a.id}</option>\n            )}\n          </select>\n        </td>\n        <td>\n          <button disabled={avail} onClick={(e) => this.deleteEdge(x.id)}>X</button>\n        </td>\n      </tr>\n    )\n\n    const srcs = this.state.edges.map(x => x.from)\n    const dsts = this.state.edges.map(x => x.to)\n    let allNodes = this.state.nodes.map(x => x.id)\n    const usedNodes = new Set([...new Set(srcs), ...new Set(dsts)])\n    let difference = [...new Set(\n      [...new Set(allNodes)].filter(x => !usedNodes.has(x)))];\n\n    const theQuery = ((this.state.generateScala)\n      ? <div>\n          <PrismCode className=\"language-scala\">\n            {'val a = g.motif(\"'+this.state.edges.map(x =>\n                \"(\"+x.from+\")-[\"+x.id+\"]->(\"+x.to+\");\"\n              ).join(\" \")\n              +difference.map(x => \"(\"+x+');')+'\")'}\n            <br/>\n            {this.state.nodes.filter(x =>\n              x.type !== \"Vertex\"\n            ).map(x =>\n              \".filter(\"+x.id+\".type == '\"+x.type+\"')\"\n            )}\n            <br />\n            {this.state.edges.filter(x =>\n              x.type !== \"Edge\"\n            ).map(x =>\n              \".filter(\"+x.id+\".relationship == '\"+x.type+\"')\"\n            )};\n          </PrismCode>\n        </div>\n      : null\n    )\n\n    return (\n      <div className=\"grid-x\">\n        <div className=\"cell medium-4\">\n          <div>\n            <div>\n              <h2>Nodes</h2>\n              <button className=\"button\"\n                onClick={this.addNode}>Add Node</button>\n              <table>\n                <tbody>\n                  {listOfNodes}\n                </tbody>\n              </table>\n            </div>\n            <div>\n              <h2>Edges</h2>\n              <button className=\"button\" onClick={this.addEdge}>Add Edge</button>\n              <table>\n                <tbody>\n                  {listOfEdges}\n                </tbody>\n              </table>\n              <button\n                onClick={this.genScal}\n                className=\"button success\">Generate Scala</button>\n            </div>\n          </div>\n        </div>\n        <div className=\"cell medium-8\" style={{background: 'lightgray'}}>\n          <Network options={{'height':'600px'}}>\n            {nodes}\n            {edges}\n          </Network>\n        </div>\n        <div className=\"cell medium-12\">\n          <div className=\"output-query\">\n            {theQuery}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport { Graph }\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Graph } from './Graph.js'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div>\n          <Graph />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}